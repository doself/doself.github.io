<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shell In Ghost</title>
  <icon>http://example.com/images/favicon_200x200.png</icon>
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-06-13T06:43:48.095Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>WireGhost</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OLLVM通用反平坦化研究</title>
    <link href="http://example.com/2020/08/28/OLLVM%E9%80%9A%E7%94%A8%E5%8F%8D%E5%B9%B3%E5%9D%A6%E5%8C%96%E7%A0%94%E7%A9%B6/"/>
    <id>http://example.com/2020/08/28/OLLVM%E9%80%9A%E7%94%A8%E5%8F%8D%E5%B9%B3%E5%9D%A6%E5%8C%96%E7%A0%94%E7%A9%B6/</id>
    <published>2020-08-27T16:12:47.000Z</published>
    <updated>2022-06-13T06:43:48.095Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;OLLVM简介&quot;&gt;&lt;a href=&quot;#OLLVM简介&quot; class=&quot;headerlink&quot; title=&quot;OLLVM简介&quot;&gt;&lt;/a&gt;OLLVM简介&lt;/h2&gt;&lt;p&gt;在介绍OLLVM之前，我们先简单了解下什么是LLVM:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. Despite its name, LLVM has little to do with traditional virtual machines. The name “LLVM” itself is not an acronym; it is the full name of the project.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="llvm" scheme="http://example.com/categories/llvm/"/>
    
    
    <category term="反混淆" scheme="http://example.com/tags/%E5%8F%8D%E6%B7%B7%E6%B7%86/"/>
    
  </entry>
  
  <entry>
    <title>Android模拟器检测体系梳理</title>
    <link href="http://example.com/2018/05/10/Android%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%A3%80%E6%B5%8B%E4%BD%93%E7%B3%BB%E6%A2%B3%E7%90%86/"/>
    <id>http://example.com/2018/05/10/Android%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%A3%80%E6%B5%8B%E4%BD%93%E7%B3%BB%E6%A2%B3%E7%90%86/</id>
    <published>2018-05-10T14:12:01.000Z</published>
    <updated>2022-06-13T06:42:55.784Z</updated>
    
    
    <summary type="html">&lt;p&gt;模拟器作为一种虚拟机，配合改机工具，能够以较低成本实现设备多开，因此而备受黑灰产的青睐。如何准确识别模拟器成为App开发中的一个重要模块，目前也有专门的公司提供相应的SDK供开发者识别模拟器。通过前段时间对模拟器检测技术的调研，希望能总结出一套特征挖掘的体系化方案。&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="http://example.com/categories/Android/"/>
    
    
    <category term="模拟器检测" scheme="http://example.com/tags/%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%A3%80%E6%B5%8B/"/>
    
    <category term="知识梳理" scheme="http://example.com/tags/%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>起底薅羊毛灰色产业链</title>
    <link href="http://example.com/2018/04/21/%E8%B5%B7%E5%BA%95%E8%96%85%E7%BE%8A%E6%AF%9B%E7%81%B0%E8%89%B2%E4%BA%A7%E4%B8%9A%E9%93%BE/"/>
    <id>http://example.com/2018/04/21/%E8%B5%B7%E5%BA%95%E8%96%85%E7%BE%8A%E6%AF%9B%E7%81%B0%E8%89%B2%E4%BA%A7%E4%B8%9A%E9%93%BE/</id>
    <published>2018-04-21T07:37:12.000Z</published>
    <updated>2022-06-13T06:40:45.451Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;薅羊毛的概念与发展&quot;&gt;&lt;a href=&quot;#薅羊毛的概念与发展&quot; class=&quot;headerlink&quot; title=&quot;薅羊毛的概念与发展&quot;&gt;&lt;/a&gt;薅羊毛的概念与发展&lt;/h2&gt;&lt;h3 id=&quot;薅羊毛的由来与概念&quot;&gt;&lt;a href=&quot;#薅羊毛的由来与概念&quot; class=&quot;headerlink&quot; title=&quot;薅羊毛的由来与概念&quot;&gt;&lt;/a&gt;薅羊毛的由来与概念&lt;/h3&gt;&lt;p&gt;上世纪末，宋丹丹和赵本山在央视春晚舞台出演了一个小品——《昨天、今天、明天》。在小品中，宋丹丹饰演的白云利用自己给生产队放羊的便利条件，揪羊毛搓毛线，给老板黑土织了一件毛衣，被扣上“薅社会主义羊毛”的罪名，这便是“薅羊毛的鼻祖”。&lt;br&gt;现实生活中，普通的薅羊毛行为指消费者通过领取优惠券、获得折扣或返现等方式从交易活动中获取实惠，这种属于正常的交易行为，没有上升到业务欺诈的层次。&lt;br&gt;本文接下来探讨的薅羊毛均指羊毛党以营利为目的，有组织地针对商家活动进行大规模的薅羊毛攻击行为。&lt;/p&gt;</summary>
    
    
    
    <category term="黑产研究" scheme="http://example.com/categories/%E9%BB%91%E4%BA%A7%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="调研" scheme="http://example.com/tags/%E8%B0%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>基于Cache的Android模拟器检测</title>
    <link href="http://example.com/2018/03/10/%E5%9F%BA%E4%BA%8ECache%E7%9A%84Android%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%A3%80%E6%B5%8B/"/>
    <id>http://example.com/2018/03/10/%E5%9F%BA%E4%BA%8ECache%E7%9A%84Android%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%A3%80%E6%B5%8B/</id>
    <published>2018-03-10T04:53:28.000Z</published>
    <updated>2022-06-13T06:44:48.817Z</updated>
    
    
    <summary type="html">&lt;p&gt;本文主要解决了ARM64位指令的兼容性问题，并通过进程间通信杜绝了崩溃现象，让这部分的检测代码更具有可操作性。。&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="http://example.com/categories/Android/"/>
    
    
    <category term="模拟器检测" scheme="http://example.com/tags/%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>六间房直播刷人气</title>
    <link href="http://example.com/2018/02/26/%E5%85%AD%E9%97%B4%E6%88%BF%E7%9B%B4%E6%92%AD%E5%88%B7%E4%BA%BA%E6%B0%94/"/>
    <id>http://example.com/2018/02/26/%E5%85%AD%E9%97%B4%E6%88%BF%E7%9B%B4%E6%92%AD%E5%88%B7%E4%BA%BA%E6%B0%94/</id>
    <published>2018-02-26T09:18:34.000Z</published>
    <updated>2022-06-13T06:44:34.317Z</updated>
    
    
    <summary type="html">&lt;p&gt;前端时间因工作业务需要，简单还原了下六间房的刷人气场景，这里主要对相关过程做下梳理，并尝试提出一些检出建议。。&lt;/p&gt;</summary>
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="直播人气" scheme="http://example.com/tags/%E7%9B%B4%E6%92%AD%E4%BA%BA%E6%B0%94/"/>
    
    <category term="业务安全" scheme="http://example.com/tags/%E4%B8%9A%E5%8A%A1%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>ROM安全梳理</title>
    <link href="http://example.com/2017/01/27/ROM%E5%AE%89%E5%85%A8%E6%A2%B3%E7%90%86/"/>
    <id>http://example.com/2017/01/27/ROM%E5%AE%89%E5%85%A8%E6%A2%B3%E7%90%86/</id>
    <published>2017-01-27T05:43:15.000Z</published>
    <updated>2022-06-13T06:44:00.157Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;智能手机配置中的ROM指的是EEProm（电擦除可写只读存储器），类似于计算机的硬盘，而一般手机刷机的过程，就是将只读内存镜像（ROM image）写入到只读内存（ROM）的过程。常见的ROM image有img、zip等格式，前者通常用fastboot程序通过数据线刷入（线刷），后者通常用recovery模式从SD卡刷入（卡刷），故img镜像也被称为线刷包，zip镜像被称为卡刷包。&lt;br&gt;此外，因为ROM image是定制系统最常见的发布形式，所以ROM这个词有时也会被用来指代手机的操作系统。&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="http://example.com/categories/Android/"/>
    
    
    <category term="知识梳理" scheme="http://example.com/tags/%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    
    <category term="ROM" scheme="http://example.com/tags/ROM/"/>
    
  </entry>
  
  <entry>
    <title>低功耗蓝牙（BLE）安全初探</title>
    <link href="http://example.com/2016/07/25/%E4%BD%8E%E5%8A%9F%E8%80%97%E8%93%9D%E7%89%99%EF%BC%88BLE%EF%BC%89%E5%AE%89%E5%85%A8%E5%88%9D%E6%8E%A2/"/>
    <id>http://example.com/2016/07/25/%E4%BD%8E%E5%8A%9F%E8%80%97%E8%93%9D%E7%89%99%EF%BC%88BLE%EF%BC%89%E5%AE%89%E5%85%A8%E5%88%9D%E6%8E%A2/</id>
    <published>2016-07-25T12:28:43.000Z</published>
    <updated>2022-06-13T06:44:22.942Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;BLE概述&quot;&gt;&lt;a href=&quot;#BLE概述&quot; class=&quot;headerlink&quot; title=&quot;BLE概述&quot;&gt;&lt;/a&gt;BLE概述&lt;/h2&gt;&lt;p&gt;“蓝牙”，即Bluetooth，是斯堪的纳维亚语中 Blåtand &amp;#x2F; Blåtann 的英化版本。该词是十世纪的一位国王Harald Bluetooth的绰号，相传他将纷争不断的丹麦部落统一为一个王国，并引入了基督教。蓝牙技术开发者Jim Kardach于1997年提出用Bluetooth这个名词，据说他当时正在读一本名为The Long Ships的小说，讲述的就是维京人和Harald Bluetooth国王的故事。他认为蓝牙可以把各种不同的通信协议统一在一起，诚如这位国王做的事情一样。至于蓝牙的logo，取自国王Harald Bluetooth名字中的【H】和【B】两个字母的组合，用古北欧文字来表示：  &lt;/p&gt;</summary>
    
    
    
    <category term="物联网" scheme="http://example.com/categories/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    
    <category term="BLE" scheme="http://example.com/tags/BLE/"/>
    
    <category term="学习总结" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>爱无惧距离，记一次对智能跳蛋的入侵</title>
    <link href="http://example.com/2016/07/07/%E7%88%B1%E6%97%A0%E6%83%A7%E8%B7%9D%E7%A6%BB%EF%BC%8C%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E6%99%BA%E8%83%BD%E8%B7%B3%E8%9B%8B%E7%9A%84%E5%85%A5%E4%BE%B5/"/>
    <id>http://example.com/2016/07/07/%E7%88%B1%E6%97%A0%E6%83%A7%E8%B7%9D%E7%A6%BB%EF%BC%8C%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E6%99%BA%E8%83%BD%E8%B7%B3%E8%9B%8B%E7%9A%84%E5%85%A5%E4%BE%B5/</id>
    <published>2016-07-07T07:46:06.000Z</published>
    <updated>2022-06-13T06:45:04.677Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;拥尔智能跳蛋&quot;&gt;&lt;a href=&quot;#拥尔智能跳蛋&quot; class=&quot;headerlink&quot; title=&quot;拥尔智能跳蛋&quot;&gt;&lt;/a&gt;拥尔智能跳蛋&lt;/h2&gt;&lt;p&gt;该产品就不多做介绍了，大家知道就好，详见&lt;a href=&quot;http://www.1024online.com/&quot;&gt;官网&lt;/a&gt;：&lt;/p&gt;</summary>
    
    
    
    <category term="智能设备" scheme="http://example.com/categories/%E6%99%BA%E8%83%BD%E8%AE%BE%E5%A4%87/"/>
    
    
    <category term="BLE" scheme="http://example.com/tags/BLE/"/>
    
    <category term="重放攻击" scheme="http://example.com/tags/%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>虚拟现实调研报告</title>
    <link href="http://example.com/2016/03/10/%E8%99%9A%E6%8B%9F%E7%8E%B0%E5%AE%9E%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A/"/>
    <id>http://example.com/2016/03/10/%E8%99%9A%E6%8B%9F%E7%8E%B0%E5%AE%9E%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A/</id>
    <published>2016-03-10T05:09:31.000Z</published>
    <updated>2022-06-13T06:45:17.999Z</updated>
    
    
    <summary type="html">&lt;p&gt;VR（虚拟现实）火起来了，不论是资本市场的表现，还是一场接一场的发布会，甚至是微信推送相关话题的数量，都在展示着VR已经开始从Geek的兴趣爱好，逐步走进主流消费者市场。国外，行业巨头跑马圈地，Facebook收购Oculus VR、索尼投入Morpheus设备、HTC携手三星共探VR；国内，各家积极布局，腾讯推出整套VR方案，3Glasses、DeePoon大朋头盔、蜂镜K1等公司体量虽小却毫不示弱。那么虚拟现实究竟是什么？会不会是下一个风口？&lt;/p&gt;</summary>
    
    
    
    <category term="虚拟现实" scheme="http://example.com/categories/%E8%99%9A%E6%8B%9F%E7%8E%B0%E5%AE%9E/"/>
    
    
    <category term="调研" scheme="http://example.com/tags/%E8%B0%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>Sadstrot木马分析报告</title>
    <link href="http://example.com/2015/08/08/Sadstrot%E6%9C%A8%E9%A9%AC%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/"/>
    <id>http://example.com/2015/08/08/Sadstrot%E6%9C%A8%E9%A9%AC%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/</id>
    <published>2015-08-08T10:21:39.000Z</published>
    <updated>2022-06-13T06:44:06.294Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;木马行为及危害&quot;&gt;&lt;a href=&quot;#木马行为及危害&quot; class=&quot;headerlink&quot; title=&quot;木马行为及危害&quot;&gt;&lt;/a&gt;木马行为及危害&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一旦运行，该木马立即申请root权限，为之后各种恶意行为做好铺垫；&lt;/li&gt;
&lt;li&gt;创建一个detect进程，此进程下的模块插件与主进程进行通信，通过回调Java层代码、hook等方式收集用户隐私；&lt;/li&gt;
&lt;li&gt;监听键盘输入，用户所有敲入的字符都会被窃取，包括银行账号密码、社交APP账号密码等；&lt;/li&gt;
&lt;li&gt;接收云端指令，执行模块更新、删除指定文件等操作，给系统安全带来极大安全隐患。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Android" scheme="http://example.com/categories/Android/"/>
    
    
    <category term="恶意代码" scheme="http://example.com/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>LBE主动防御逆向</title>
    <link href="http://example.com/2015/06/30/LBE%E4%B8%BB%E5%8A%A8%E9%98%B2%E5%BE%A1%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2015/06/30/LBE%E4%B8%BB%E5%8A%A8%E9%98%B2%E5%BE%A1%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</id>
    <published>2015-06-30T08:30:12.000Z</published>
    <updated>2022-06-13T06:43:38.351Z</updated>
    
    
    <summary type="html">&lt;p&gt;运行程序，LBEApplication会释放assets&amp;#x2F;hips.jar文件，解压缩至app_hips目录。开启主动防御功能后，会申请获取su权限，运行bootstrap可执行文件。 &lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="http://example.com/categories/Android/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>360通讯录网络加密协议分析</title>
    <link href="http://example.com/2015/06/04/360%E9%80%9A%E8%AE%AF%E5%BD%95%E7%BD%91%E7%BB%9C%E5%8A%A0%E5%AF%86%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2015/06/04/360%E9%80%9A%E8%AE%AF%E5%BD%95%E7%BD%91%E7%BB%9C%E5%8A%A0%E5%AF%86%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/</id>
    <published>2015-06-04T05:33:32.000Z</published>
    <updated>2022-06-13T06:42:49.228Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;分析过程记录&quot;&gt;&lt;a href=&quot;#分析过程记录&quot; class=&quot;headerlink&quot; title=&quot;分析过程记录&quot;&gt;&lt;/a&gt;分析过程记录&lt;/h2&gt;&lt;p&gt;通过检索关键字，在Java层定位出获取密钥所在的代码段：&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="http://example.com/categories/Android/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>ELF Hook总结与代码实现</title>
    <link href="http://example.com/2015/04/28/ELF-Hook%E6%80%BB%E7%BB%93%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2015/04/28/ELF-Hook%E6%80%BB%E7%BB%93%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</id>
    <published>2015-04-28T02:07:12.000Z</published>
    <updated>2022-06-13T06:43:19.499Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是Hook&quot;&gt;&lt;a href=&quot;#什么是Hook&quot; class=&quot;headerlink&quot; title=&quot;什么是Hook&quot;&gt;&lt;/a&gt;什么是Hook&lt;/h2&gt;&lt;p&gt;Hook，中文又译为“挂钩”或“钩子”。这里可以首先从字面上做了解，钩子是干什么的呢？日常生活中，我们的钩子是用来钩住某种东西的，比如说，鱼钩是用来钓鱼的，一旦鱼咬了钩，钩子就一直钩住鱼了，任凭鱼在水里怎么游，也逃不出鱼钩的控制。同样的，Android、IOS中的钩子Hook也是用来钩东西的，比较抽象的是它是用来钩函数或者变量的。举个例子，Hook钩子钩住键盘事件相关的函数，那么当有任何相应的键盘操作时，通过Hook就能知道用户都输入了些什么，多么形象啊，把老鼠Mouse钩住了，不管你干什么，都逃不过我钩子Hook的手掌心。&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="http://example.com/categories/Android/"/>
    
    
    <category term="ELF" scheme="http://example.com/tags/ELF/"/>
    
    <category term="源码分析" scheme="http://example.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>浅谈ELF可执行文件的启动流程</title>
    <link href="http://example.com/2015/04/17/%E6%B5%85%E8%B0%88ELF%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <id>http://example.com/2015/04/17/%E6%B5%85%E8%B0%88ELF%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</id>
    <published>2015-04-17T14:41:39.000Z</published>
    <updated>2022-06-13T06:44:57.848Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;源码分析&quot;&gt;&lt;a href=&quot;#源码分析&quot; class=&quot;headerlink&quot; title=&quot;源码分析&quot;&gt;&lt;/a&gt;源码分析&lt;/h2&gt;&lt;p&gt;无论是动态链接还是静态链接的原生程序，在链接阶段都会传入一个链接脚本。根据链接时指定参数的不同，所传入的链接脚本也不一样。在 NDK 目录下检索 ldscripts，所有的链接脚本都在该路径中。默认情况下，会传入armelf_linux_eabi.x脚本文件。&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="http://example.com/categories/Android/"/>
    
    
    <category term="ELF" scheme="http://example.com/tags/ELF/"/>
    
    <category term="源码分析" scheme="http://example.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>细说So动态库的加载流程</title>
    <link href="http://example.com/2015/04/09/%E7%BB%86%E8%AF%B4So%E5%8A%A8%E6%80%81%E5%BA%93%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/"/>
    <id>http://example.com/2015/04/09/%E7%BB%86%E8%AF%B4So%E5%8A%A8%E6%80%81%E5%BA%93%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/</id>
    <published>2015-04-09T05:52:18.000Z</published>
    <updated>2022-06-13T06:45:12.148Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;dlopen之内存装载&quot;&gt;&lt;a href=&quot;#dlopen之内存装载&quot; class=&quot;headerlink&quot; title=&quot;dlopen之内存装载&quot;&gt;&lt;/a&gt;dlopen之内存装载&lt;/h2&gt;&lt;p&gt;dlopen用来打开一个动态链接库，并将其装入内存。它的定义在Android源码中的路径为&amp;#x2F;bionic&amp;#x2F;linker&amp;#x2F;dlfcn.cpp，执行流程如下：&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="http://example.com/categories/Android/"/>
    
    
    <category term="ELF" scheme="http://example.com/tags/ELF/"/>
    
    <category term="源码分析" scheme="http://example.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>ELF文件结构详解</title>
    <link href="http://example.com/2015/04/01/ELF%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2015/04/01/ELF%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3/</id>
    <published>2015-04-01T06:48:20.000Z</published>
    <updated>2022-06-13T06:43:10.118Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;链接与装载视图&quot;&gt;&lt;a href=&quot;#链接与装载视图&quot; class=&quot;headerlink&quot; title=&quot;链接与装载视图&quot;&gt;&lt;/a&gt;链接与装载视图&lt;/h2&gt;&lt;p&gt;Elf文件有2个平行视角：一个是程序链接角度，一个是程序装载角度。从链接的角度来看，Elf文件是按“Section”（节）的形式存储；而在装载的角度上，Elf文件又可以按“Segment”（段）来划分。实际上，Section和Segment难以从中文的翻译上加以区分。因为很多时候Section也被翻译成段，比如Section Header Table，有的资料叫段表、有的称为节区。后面在讲解时，就不对其加以区分。。&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="http://example.com/categories/Android/"/>
    
    
    <category term="ELF" scheme="http://example.com/tags/ELF/"/>
    
    <category term="文件格式" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/"/>
    
  </entry>
  
</feed>
